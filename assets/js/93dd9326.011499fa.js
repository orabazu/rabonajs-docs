"use strict";(self.webpackChunkrabonjs_docs=self.webpackChunkrabonjs_docs||[]).push([[335],{37764:(t,o,n)=>{n.r(o),n.d(o,{CustomShotsComponent:()=>m,ShotsComponent:()=>u,assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var e=n(87462),s=n(67294),a=n(3905),i=n(5543);const r={sidebar_position:2},l="Plot Shots",d={unversionedId:"tutorial-basics/plot-shots",id:"tutorial-basics/plot-shots",title:"Plot Shots",description:"In this example we are going to plot mock shot data. We will use different styles for",source:"@site/docs/tutorial-basics/plot-shots.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/plot-shots",permalink:"/rabonajs-docs/docs/tutorial-basics/plot-shots",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/plot-shots.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Plot Passes on a Pitch",permalink:"/rabonajs-docs/docs/tutorial-basics/plot-passes-on-a-pitch"},next:{title:"Add/Remove Layers",permalink:"/rabonajs-docs/docs/tutorial-basics/add-remove-layers"}},c={},h=(t,o)=>Math.floor(Math.random()*(o-t+1)+t),p=[{value:"Customizing the plot",id:"customizing-the-plot",level:2}],u=()=>{const[t,o]=(0,s.useState)(null),n=[];for(let s=0;s<10;s++)n.push({startX:h(120,90),startY:h(65,25),endX:120,endY:h(45,35),result:Math.random()>.5?"goal":"miss"});const e={height:80,width:120,padding:100,linecolour:"#ffffff",fillcolour:"#7ec850"};return(0,s.useEffect)((()=>{if(!t){const t=i.Z.pitch("pitch",e);o(t);i.Z.layer({type:"ballMovement",data:n,options:{color:"yellow",width:1.5,showArrows:!0,radius:3}}).addTo(t)}}),[]),(0,a.kt)("div",{id:"pitch",style:{width:"750px",margin:"auto"}})},m=()=>{const[t,o]=(0,s.useState)(null),n=[];for(let s=0;s<10;s++)n.push({startX:h(120,90),startY:h(65,25),endX:120,endY:h(45,35),result:Math.random()>.5?"goal":"miss"});const e={height:80,width:120,padding:100,linecolour:"#ffffff",fillcolour:"#7ec850"};return(0,s.useEffect)((()=>{if(!t){const t=i.Z.pitch("pitch2",e);o(t);i.Z.layer({type:"ballMovement",data:n,options:{color:"yellow",width:1.5,showArrows:!1,radius:3,getLineColor:t=>"goal"===t.result?"green":"red",getCircleColor:t=>"goal"===t.result?"green":"red"}}).addTo(t)}}),[]),(0,a.kt)("div",{id:"pitch2",style:{width:"750px",margin:"auto"}})},f={toc:p,ShotsComponent:u,CustomShotsComponent:m};function g(t){let{components:o,...n}=t;return(0,a.kt)("wrapper",(0,e.Z)({},f,n,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"plot-shots"},"Plot Shots"),(0,a.kt)("p",null,"In this example we are going to plot mock shot data. We will use different styles for\ngoals and misses."),(0,a.kt)("p",null,"Let's start by importing Rabona and generate data we are going to use."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import Rabona from "rabonajs";\nimport { useEffect, useRef, useState } from "react";\n\n// generates mock data with the given interval\nconst randomIntFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n\nexport const ShotsComponent = () => {\n  const [pitch, setPitch] = useState(null);\n  // generate random shot data\n  const shots = [];\n  for (let i = 0; i < 10; i++) {\n    shots.push({\n      startX: randomIntFromInterval(120,90), // random x position around 6yard box\n      startY: randomIntFromInterval(65,25), // random y position around 6yard box\n      endX: 120,\n      endY: randomIntFromInterval(45,35), // random y position in the goal\n      result: Math.random() > 0.5 ? "goal" : "miss",\n    });\n  }\n  const pitchOptions = {\n    height: 80, //in px\n    width: 120, //in px\n    padding: 100, // in px, distance between the pitch border lines and external border\n    linecolour: "#ffffff",\n    fillcolour: "#7ec850",\n  };\n  useEffect(() => {\n    if (!pitch) {\n      const pitch = Rabona.pitch("pitch", pitchOptions);\n      setPitch(pitch);\n      const layer = Rabona.layer({\n        type: "ballMovement",\n        data: shots,\n        options: {\n          color: "yellow",\n          width: 1.5,\n          showArrows: true,\n          radius: 3,\n        },\n      }).addTo(pitch);\n    }\n  }, []);\n  return <div id="pitch" style={{ width: "750px", margin: "auto" }} />;\n};\n')),(0,a.kt)(u,{mdxType:"ShotsComponent"}),(0,a.kt)("h2",{id:"customizing-the-plot"},"Customizing the plot"),(0,a.kt)("p",null,"What if you want you want to customize the plot? You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"getLineColor")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"getCircle")," functions to customize the plot.\nThis could be useful if you want to use different colors for goals and misses."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'export const CustomShotsComponent = () => {\n  const [pitch, setPitch] = useState(null);\n  // generate random shot data\n  const shots = [];\n  for (let i = 0; i < 10; i++) {\n    shots.push({\n      startX: randomIntFromInterval(120,90),\n      startY: randomIntFromInterval(65,25),\n      endX: 120,\n      endY: randomIntFromInterval(45,35),\n      result: Math.random() > 0.5 ? "goal" : "miss",\n    });\n  }\n  const pitchOptions = {\n    height: 80, //in px\n    width: 120, //in px\n    padding: 100, // in px, distance between the pitch border lines and external border\n    linecolour: "#ffffff",\n    fillcolour: "#7ec850",\n  };\n  useEffect(() => {\n    if (!pitch) {\n      const pitch = Rabona.pitch("pitch", pitchOptions);\n      setPitch(pitch);\n      const layer = Rabona.layer({\n        type: "ballMovement",\n        data: shots,\n        options: {\n          width: 1.5,\n          showArrows: true,\n          radius: 3,\n          // highlight-start\n          getLineColor: (d) => (d.result === "goal" ? "green" : "red"),\n          getCircleColor: (d) => (d.result === "goal" ? "green" : "red"),\n          // highlight-end\n        },\n      }).addTo(pitch);\n    }\n  }, []);\n  return <div id="pitch2" style={{ width: "750px", margin: "auto" }} />;\n};\n\n<CustomShotsComponent/>\n')),(0,a.kt)(m,{mdxType:"CustomShotsComponent"}))}g.isMDXComponent=!0}}]);