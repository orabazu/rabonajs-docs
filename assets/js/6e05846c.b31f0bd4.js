"use strict";(self.webpackChunkrabonjs_docs=self.webpackChunkrabonjs_docs||[]).push([[484],{7384:(e,t,a)=>{a.r(t),a.d(t,{PitchComponent:()=>y,ToggleCheckbox:()=>u,assets:()=>d,contentTitle:()=>s,default:()=>k,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var n=a(7462),o=a(7294),r=a(3905),l=a(5543);const i={sidebar_position:3},s="Add/Remove Layers",c={unversionedId:"tutorial-basics/add-remove-layers",id:"tutorial-basics/add-remove-layers",title:"Add/Remove Layers",description:"In this tutorial, we will learn how to add and remove layers to the pitch.",source:"@site/docs/tutorial-basics/add-remove-layers.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/add-remove-layers",permalink:"/rabonajs-docs/docs/tutorial-basics/add-remove-layers",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/add-remove-layers.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Plot Shots",permalink:"/rabonajs-docs/docs/tutorial-basics/plot-shots"}},d={},p=[];for(let g=0;g<10;g++)p.push({startX:Math.floor(120*Math.random()),startY:Math.floor(80*Math.random()),endX:Math.floor(120*Math.random()),endY:Math.floor(80*Math.random())});const h=[{value:"Line Layer",id:"line-layer",level:3},{value:"Circle Layer",id:"circle-layer",level:3},{value:"Ball Movement Layer",id:"ball-movement-layer",level:3},{value:"Creating a Layer",id:"creating-a-layer",level:3},{value:"Adding a Layer",id:"adding-a-layer",level:3},{value:"Removing a Layer",id:"removing-a-layer",level:3},{value:"Layer toggler",id:"layer-toggler",level:3},{value:"Try it out \u26bd\ufe0f",id:"try-it-out-\ufe0f",level:3}],u=e=>{let{checked:t,onChange:a}=e;return(0,r.kt)("label",null,(0,r.kt)("input",{type:"checkbox",checked:t,onChange:e=>a(e.target.checked)}),"Show passes")},y=()=>{const[e,t]=(0,o.useState)(null),[a,n]=(0,o.useState)(null),[i,s]=(0,o.useState)(!1),c={scaler:6,height:80,width:120,padding:100,linecolour:"#ffffff",fillcolour:"#7ec850"};(0,o.useEffect)((()=>{if(!e){const e=l.Z.pitch("pitch",c);t(e)}}),[]);return(0,r.kt)(o.Fragment,null,(0,r.kt)(u,{checked:i,onChange:t=>{if(s(t),t){const t=l.Z.layer({type:"ballMovement",data:p,options:{color:"yellow",width:1.5,showArrows:!0,radius:3}}).addTo(e);n(t)}else e.removeLayer(a)},mdxType:"ToggleCheckbox"}),(0,r.kt)("div",{id:"pitch",style:{width:"500px",margin:"auto"}}))},m={toc:h,ToggleCheckbox:u,PitchComponent:y};function k(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"addremove-layers"},"Add/Remove Layers"),(0,r.kt)("p",null,"In this tutorial, we will learn how to add and remove layers to the pitch.\nWe will also learn how to create a layer toggler using RabonaJS and React.\nSimplest way to create a layer in RabonaJS is calling ",(0,r.kt)("inlineCode",{parentName:"p"},"Rabona.Layer()")," function. There are three types of layers in RabonaJS:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ballMovement")," - for drawing passes, dribbles, shots, etc. It is a combination of line and circle layers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"circle")," - for drawing point-like data, shot positions, player positions, etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"line")," - for drawing lines, player movements, etc. without a circle")),(0,r.kt)("h3",{id:"line-layer"},"Line Layer"),(0,r.kt)("p",null,"Line layer is used for drawing lines between two points. It can be used for drawing passes, shots etc."),(0,r.kt)("h3",{id:"circle-layer"},"Circle Layer"),(0,r.kt)("p",null,"Circle layer is used for drawing circles. It can be used for drawing player positions, shot positions, etc."),(0,r.kt)("h3",{id:"ball-movement-layer"},"Ball Movement Layer"),(0,r.kt)("p",null,"Ball Movement layer is used for drawing passes, dribbles, shots, etc. It is a combination of line and circle layers."),(0,r.kt)("h3",{id:"creating-a-layer"},"Creating a Layer"),(0,r.kt)("p",null,"To create a layer, you need to call ",(0,r.kt)("inlineCode",{parentName:"p"},"Rabona.layer()")," function. It takes an object as a parameter. This object has three properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - type of the layer. It can be ",(0,r.kt)("inlineCode",{parentName:"li"},"line"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"circle")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"ballMovement"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," - data for the layer. It can be an array of objects or a function that returns an array of objects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," - options for the layer. It is an object that has different properties for different types of layers.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const layer = Rabona.layer({\n  type: "ballMovement",\n  data: [pass],\n  options: {\n    color: "yellow",\n    width: 1.5,\n    showArrows: true,\n    radius: 3,\n  },\n});\n')),(0,r.kt)("h3",{id:"adding-a-layer"},"Adding a Layer"),(0,r.kt)("p",null,"There are two ways you can add a layer to the pitch. You can add it to the pitch when you create it or you can add it later.\nTo add a layer to the pitch after creating it, you need to call ",(0,r.kt)("inlineCode",{parentName:"p"},"Pitch.addLayer()")," function. It takes a layer as a parameter.\nAltenatively, you can add a layer just after creating by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"Layer.addTo(pitch)")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const pitch = Rabona.pitch("pitch", pitchOptions);\nconst layer = Rabona.layer({\n  type: "ballMovement",\n  data: [pass],\n  options: {\n    color: "yellow",\n    width: 1.5,\n    showArrows: true,\n    radius: 3,\n  },\n});\n\npitch.addLayer(layer);\n')),(0,r.kt)("p",null,"or using ",(0,r.kt)("inlineCode",{parentName:"p"},"Layer.addTo(pitch)")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const pitch = Rabona.pitch("pitch", pitchOptions);\nconst layer = Rabona.layer({\n  type: "ballMovement",\n  data: [pass],\n  options: {\n    color: "yellow",\n    width: 1.5,\n    showArrows: true,\n    radius: 3,\n  },\n}).addTo(pitch);\n')),(0,r.kt)("h3",{id:"removing-a-layer"},"Removing a Layer"),(0,r.kt)("p",null,"To remove a layer from the pitch, you need to call ",(0,r.kt)("inlineCode",{parentName:"p"},"Pitch.removeLayer()")," function. It takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"Layer")," object as a parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"pitch.removeLayer(layer);\n")),(0,r.kt)("h3",{id:"layer-toggler"},"Layer toggler"),(0,r.kt)("p",null,"Let's build a layer toggler using RabonaJS and React. We will create a layer toggler for a ball movement layer.\nWe will create a button that will toggle the layer on and off."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// First import libraries and create mock pass data\nimport { useState, useEffect } from "react";\nimport Rabona from "rabonajs";\nconst passes = [];\nfor (let i = 0; i < 10; i++) {\n  passes.push({\n    startX: Math.floor(Math.random() * 120),\n    startY: Math.floor(Math.random() * 80),\n    endX: Math.floor(Math.random() * 120),\n    endY: Math.floor(Math.random() * 80),\n  });\n}\n')),(0,r.kt)("p",null,"A checkbox component that will toggle the layer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="ToggleCheckbox.jsx"',title:'"ToggleCheckbox.jsx"'},'export const ToggleCheckbox = ({ checked, onChange }) => {\n  return (\n    <label>\n      <input\n        type="checkbox"\n        checked={checked}\n        onChange={(e) => onChange(e.target.checked)}\n      />\n      Show passes\n    </label>\n  );\n};\n')),(0,r.kt)("p",null,"Create a component that will render a pitch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="PitchComponent.jsx"',title:'"PitchComponent.jsx"'},'export const PitchComponent = () => {\n  const [pitch, setPitch] = useState(null);\n  const [layer, setLayer] = useState(null);\n  const [showPasses, setShowPasses] = useState(false);\n  const pitchOptions = {\n    scaler: 6, //constant to resize the pitch\n    height: 80, //in px\n    width: 120, //in px\n    padding: 100, // in px, distance between the pitch border lines and external border\n    linecolour: "#ffffff",\n    fillcolour: "#7ec850",\n  };\n  useEffect(() => {\n    if (!pitch) {\n      const pitch = Rabona.pitch("pitch", pitchOptions);\n      setPitch(pitch);\n    }\n  }, []);\n  const onChange = (checked) => {\n    setShowPasses(checked);\n    // ... toggle layer here\n  };\n  return (\n    <>\n      <ToggleCheckbox checked={showPasses} onChange={onChange} />\n      <div id="pitch" style={{ width: "500px", margin: "auto" }} />\n    </>\n  );\n};\n\n<PitchComponent />\n')),(0,r.kt)("p",null,"Inside onChange function we will check if the checkbox is checked or not.\nIf it is checked, we will create a layer and add it to the pitch. If it is not checked, we will remove the layer from the pitch."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'  const onChange = (checked) => {\n    //highlight-start\n    setShowPasses(checked);\n    if (checked) {\n      const layer = Rabona.layer({\n        type: "ballMovement",\n        data: passes,\n        options: {\n          color: "yellow",\n          width: 1.5,\n          showArrows: true,\n          radius: 3,\n        },\n      }).addTo(pitch);\n      // We are storing the layer object instance in the state so that we can use it later\n      setLayer(layer);\n    } else {\n      // Important thing here is to pass the layer object instance to the removeLayer function\n      pitch.removeLayer(layer);\n    }\n    //highlight-end\n  };\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"It is important to the pass whole layer instance to the ",(0,r.kt)("inlineCode",{parentName:"p"},"removeLayer")," function. If you pass a layer id, it will not work.")),(0,r.kt)("h3",{id:"try-it-out-\ufe0f"},"Try it out \u26bd\ufe0f"),(0,r.kt)(y,{mdxType:"PitchComponent"}))}k.isMDXComponent=!0}}]);